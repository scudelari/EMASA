<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CreateDatabaseSQL" xml:space="preserve">
    <value>-- Table Creation
DROP TABLE IF EXISTS [L_Individual_FinalResultDefinition];
DROP TABLE IF EXISTS [L_Individual_GHInputParameterDefinition];
DROP TABLE IF EXISTS [FinalResultDefinition];
DROP TABLE IF EXISTS [GHInputParameterDefinition];
DROP TABLE IF EXISTS [Individual];
DROP TABLE IF EXISTS [Population];

CREATE TABLE [Population] ([Id_Population] INTEGER PRIMARY KEY ON CONFLICT FAIL AUTOINCREMENT NOT NULL ON CONFLICT FAIL UNIQUE ON CONFLICT FAIL);

CREATE TABLE [Individual] ([Id_Individual] INTEGER PRIMARY KEY ON CONFLICT FAIL AUTOINCREMENT NOT NULL ON CONFLICT FAIL UNIQUE ON CONFLICT FAIL,
       [Population] INTEGER  NOT NULL ON CONFLICT FAIL REFERENCES [Population]([Id_Population]) ON DELETE CASCADE ON UPDATE CASCADE, 
       [Calculated] INTEGER NOT NULL ON CONFLICT FAIL,
       [CalcTime_ms] INTEGER DEFAULT NULL);

CREATE TABLE [GHInputParameterDefinition](
  [Id_GHInputParameterDefinition] INTEGER PRIMARY KEY ON CONFLICT FAIL AUTOINCREMENT NOT NULL ON CONFLICT FAIL UNIQUE ON CONFLICT FAIL, 
  [Name] TEXT NOT NULL ON CONFLICT FAIL UNIQUE ON CONFLICT FAIL, 
  [Max] BLOB DEFAULT NULL, 
  [Min] BLOB DEFAULT NULL, 
  [Type] TEXT NOT NULL ON CONFLICT FAIL);
  
CREATE TABLE [GHOutputParameterDefinition](
  [Id_GHOutputParameterDefinition] INTEGER PRIMARY KEY ON CONFLICT FAIL AUTOINCREMENT NOT NULL ON CONFLICT FAIL UNIQUE ON CONFLICT FAIL, 
  [Name] TEXT NOT NULL ON CONFLICT FAIL UNIQUE ON CONFLICT FAIL, 
  [Type] TEXT NOT NULL ON CONFLICT FAIL);

CREATE TABLE [FinalResultDefinition](
  [Id_FinalResultDefinition] INTEGER PRIMARY KEY ON CONFLICT FAIL AUTOINCREMENT NOT NULL ON CONFLICT FAIL UNIQUE ON CONFLICT FAIL, 
  [Name] Text NOT NULL ON CONFLICT FAIL,
  [Type] TEXT NOT NULL ON CONFLICT FAIL);


CREATE TABLE [L_Individual_GHInputParameterDefinition](
  [Id_Individual] INTEGER NOT NULL ON CONFLICT FAIL REFERENCES [Individual]([Id_Individual]) ON DELETE CASCADE ON UPDATE CASCADE, 
  [Id_GHInputParameterDefinition] INTEGER NOT NULL ON CONFLICT FAIL REFERENCES [GHInputParameterDefinition]([Id_GHInputParameterDefinition]) ON DELETE CASCADE ON UPDATE CASCADE, 
  [Value] BLOB NOT NULL ON CONFLICT FAIL, 
  PRIMARY KEY([Id_Individual], [Id_GHInputParameterDefinition]) ON CONFLICT FAIL);

CREATE TABLE [L_Individual_GHOutputParameterDefinition](
  [Id_Individual] INTEGER NOT NULL ON CONFLICT FAIL REFERENCES [Individual]([Id_Individual]) ON DELETE CASCADE ON UPDATE CASCADE, 
  [Id_GHOutputParameterDefinition] INTEGER NOT NULL ON CONFLICT FAIL REFERENCES [GHOutputParameterDefinition]([Id_GHOutputParameterDefinition]) ON DELETE CASCADE ON UPDATE CASCADE, 
  [Value] BLOB NOT NULL ON CONFLICT FAIL, 
  PRIMARY KEY([Id_Individual], [Id_GHOutputParameterDefinition]) ON CONFLICT FAIL);

CREATE TABLE [L_Individual_FinalResultDefinition](
  [Id_Individual] INTEGER NOT NULL ON CONFLICT FAIL REFERENCES [Individual]([Id_Individual]) ON DELETE CASCADE ON UPDATE CASCADE, 
  [Id_FinalResultDefinition] INTEGER NOT NULL ON CONFLICT FAIL REFERENCES [FinalResultDefinition]([Id_FinalResultDefinition]) ON DELETE CASCADE ON UPDATE CASCADE, 
  [Value] BLOB NOT NULL ON CONFLICT FAIL, 
  PRIMARY KEY([Id_Individual], [Id_FinalResultDefinition]) ON CONFLICT FAIL);

-- View Creation
DROP VIEW IF EXISTS V_GHInputParameterVars;
DROP VIEW IF EXISTS V_FinalResultVars;

CREATE VIEW V_GHInputParameterVars AS
SELECT 
       I.Id_Individual,
       I.Calculated,
       I.CalcTime_ms,
       input.Id_GHInputParameterDefinition,
       input.Name,
       input.Type,
       input.MinBlob,
       input.MaxBlob,
       l_input.Value 
FROM Individual I
INNER JOIN L_Individual_GHInputParameterDefinition l_input ON I.Id_Individual = l_input.Id_Individual
INNER JOIN GHInputParameterDefinition input ON input.Id_GHInputParameterDefinition = l_input.Id_GHInputParameterDefinition;

CREATE VIEW V_FinalResultVars AS
SELECT
       I.Id_Individual,
       I.Calculated,
       I.CalcTime_ms,
       output.Name,
       output.Type,
       l_output.Value
FROM Individual I
INNER JOIN L_Individual_FinalResultDefinition l_output ON I.Id_Individual = l_output.Id_Individual
INNER JOIN FinalResultDefinition output ON output.Id_FinalResultDefinition = l_output.Id_FinalResultDefinition;</value>
  </data>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="EMS_App_Icon" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\EMS_App_Icon.ico;System.Drawing.Icon, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
</root>